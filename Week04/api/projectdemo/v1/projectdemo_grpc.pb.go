// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package projectdemo_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProjectDemoClient is the client API for ProjectDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectDemoClient interface {
	HealthCheck(ctx context.Context, in *ProjectDemoRequest, opts ...grpc.CallOption) (*ProjectDemoResponse, error)
}

type projectDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectDemoClient(cc grpc.ClientConnInterface) ProjectDemoClient {
	return &projectDemoClient{cc}
}

func (c *projectDemoClient) HealthCheck(ctx context.Context, in *ProjectDemoRequest, opts ...grpc.CallOption) (*ProjectDemoResponse, error) {
	out := new(ProjectDemoResponse)
	err := c.cc.Invoke(ctx, "/projectdemo.v1.ProjectDemo/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectDemoServer is the server API for ProjectDemo service.
// All implementations must embed UnimplementedProjectDemoServer
// for forward compatibility
type ProjectDemoServer interface {
	HealthCheck(context.Context, *ProjectDemoRequest) (*ProjectDemoResponse, error)
	mustEmbedUnimplementedProjectDemoServer()
}

// UnimplementedProjectDemoServer must be embedded to have forward compatible implementations.
type UnimplementedProjectDemoServer struct {
}

func (UnimplementedProjectDemoServer) HealthCheck(context.Context, *ProjectDemoRequest) (*ProjectDemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedProjectDemoServer) mustEmbedUnimplementedProjectDemoServer() {}

// UnsafeProjectDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectDemoServer will
// result in compilation errors.
type UnsafeProjectDemoServer interface {
	mustEmbedUnimplementedProjectDemoServer()
}

func RegisterProjectDemoServer(s grpc.ServiceRegistrar, srv ProjectDemoServer) {
	s.RegisterService(&_ProjectDemo_serviceDesc, srv)
}

func _ProjectDemo_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectDemoServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectdemo.v1.ProjectDemo/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectDemoServer).HealthCheck(ctx, req.(*ProjectDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectDemo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "projectdemo.v1.ProjectDemo",
	HandlerType: (*ProjectDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ProjectDemo_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "projectdemo.proto",
}
